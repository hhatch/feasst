{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lennard Jones reference configuration\n",
    "\n",
    "In this example, an instantaneous configuration is compared against published values for the potential energy.\n",
    "\n",
    "First, the potential energy between two particles is compared to the analytical value.\n",
    "Next, the energy of an entire configuration is compared against the NIST SRSW reference calculations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import unittest\n",
    "import feasst\n",
    "\n",
    "# include feasst/plugin/system/tutorial/lj_system.py to conveniently create lj systems\n",
    "sys.path.insert(0, feasst.install_dir() + '/plugin/system/tutorial/')\n",
    "import lj_system\n",
    "\n",
    "def two_particle_config(displacement):\n",
    "    \"\"\"Return a two particle configuration with the given displacement between centers\"\"\"\n",
    "    config = lj_system.configuration(num=2)\n",
    "    select = feasst.SelectList()\n",
    "    select.particle(1, config)\n",
    "    config.displace_particle(select, displacement)\n",
    "    return config\n",
    "\n",
    "class TestMonteCarloLJRef(unittest.TestCase):\n",
    "    \"\"\"The FEASST implementation of the LJ potential is tested against known cases.\"\"\"\n",
    "    def test_two_particle(self):\n",
    "        \"\"\"Test the LJ potential against analytical calculation of two particles\"\"\"\n",
    "\n",
    "        displacement = feasst.Position(feasst.args({\"x\": \"1.2345\", \"y\": \"0\", \"z\": \"0\"}))\n",
    "        system = lj_system.system(two_particle_config(displacement))\n",
    "\n",
    "        # compute the energy of the system\n",
    "        system.energy()\n",
    "\n",
    "        # compute the expected analytical LJ and LRC energies\n",
    "        enlj = 4*(pow(displacement.coord(0), -12) - pow(displacement.coord(0), -6))\n",
    "        rcut = system.configuration().model_params().cutoff().value(0)\n",
    "        enlrc = (8./3.)*feasst.PI*system.configuration().num_particles()**2/ \\\n",
    "            system.configuration().domain().volume()*((1./3.)*rcut**(-9) - rcut**(-3))\n",
    "\n",
    "        # Compare the analytical results with the FEASST computed energies.\n",
    "        # The energies of the individual potentials (e.g., LJ and LRC) are stored as profiles with\n",
    "        # indices based on the order that the potentials were initialized.\n",
    "        # Thus, profile index 0 refers to LJ while 1 refers to LRC.\n",
    "        # In addition, the last computed value of the energy of all potentials is also stored.\n",
    "        self.assertAlmostEqual(enlj, system.stored_energy_profile()[0], 15)\n",
    "        self.assertAlmostEqual(enlrc, system.stored_energy_profile()[1], 15)\n",
    "        self.assertAlmostEqual(enlj + enlrc, system.stored_energy(), 15)\n",
    "\n",
    "    def test_srsw_ref_config(self):\n",
    "        \"\"\"Test the LJ potential against a configuration of 30 particles.\n",
    "        In particular, the 4th configuration of the LJ SRSW reference:\n",
    "        https://www.nist.gov/mml/csd/chemical-informatics-research-group/lennard-jones-fluid-reference-calculations\n",
    "        \"\"\"\n",
    "        config = lj_system.configuration()\n",
    "        feasst.FileXYZ().load(feasst.install_dir() + \"/plugin/system/test/data/lj_sample_config_periodic4.xyz\", config)\n",
    "        self.assertEqual(30, config.num_particles())\n",
    "        system = lj_system.system(config=config)\n",
    "        system.energy()\n",
    "        enlj = -16.790321304625856\n",
    "        enlrc = -0.5451660014945704\n",
    "        self.assertAlmostEqual(enlj, system.stored_energy_profile()[0], 15)\n",
    "        self.assertAlmostEqual(enlrc, system.stored_energy_profile()[1], 15)\n",
    "        self.assertAlmostEqual(enlj + enlrc, system.energy(), 15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the tests."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_srsw_ref_config (__main__.TestMonteCarloLJRef)\n",
      "Test the LJ potential against a configuration of 30 particles. ... ok\n",
      "test_two_particle (__main__.TestMonteCarloLJRef)\n",
      "Test the LJ potential against analytical calculation of two particles ... ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 2 tests in 0.002s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7fafc2f8b5d0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

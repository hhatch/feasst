{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grand canonical ensemble Monte Carlo\n",
    "\n",
    "In this example, a short grand canonical Monte Carlo simulation of Lennard Jones particles is conducted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import unittest\n",
    "import feasst\n",
    "sys.path.insert(0, feasst.install_dir() + '/plugin/system/tutorial/')\n",
    "import lj_system\n",
    "sys.path.insert(0, feasst.install_dir() + '/plugin/monte_carlo/tutorial/')\n",
    "import analyze\n",
    "\n",
    "class TestMonteCarlo2LJGCMC(unittest.TestCase):\n",
    "    \"\"\"Test a grand canonical ensemble Lennard Jones Monte Carlo simulation\"\"\"\n",
    "    def test(self):\n",
    "        \"\"\"Compute the average number of particles and assert that it is greater than 0\"\"\"\n",
    "        monte_carlo = feasst.MonteCarlo()\n",
    "        monte_carlo.set(lj_system.system(lj_system.configuration(box_length=8)))\n",
    "        monte_carlo.set(feasst.MakeMetropolis(feasst.args(\n",
    "            {\"beta\": str(1./1.5), \"chemical_potential\": \"-8.352321\"})))\n",
    "        monte_carlo.add(feasst.MakeTrialTranslate(feasst.args(\n",
    "            {\"weight\": \"1.\", \"tunable_param\": \"2.\"})))\n",
    "        # add an insertion/deletion trial attempt\n",
    "        feasst.add_trial_transfer(monte_carlo, feasst.args({\"weight\": \"1.\", \"particle_type\": \"0\"}))\n",
    "        steps_per = int(1e3)\n",
    "        analyze.add(monte_carlo, steps_per)\n",
    "\n",
    "        # Add an Analyze which computes the average number of particles.\n",
    "        # Just before adding, store the number of existing Analyzers in order to remember the\n",
    "        # index of the newly added Analyze.\n",
    "        analyze_index = monte_carlo.num_analyzers()\n",
    "        monte_carlo.add(feasst.MakeNumParticles(feasst.args(\n",
    "            {\"steps_per_write\": str(steps_per), \"file_name\": \"gcmc_num_particles.txt\"})))\n",
    "\n",
    "        # peform a short simulation\n",
    "        monte_carlo.attempt(int(1e5))\n",
    "\n",
    "        # assert that particles were added during the simulation\n",
    "        self.assertTrue(monte_carlo.analyze(analyze_index).accumulator().average() > 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test (__main__.TestMonteCarlo2LJGCMC)\n",
      "Compute the average number of particles and assert that it is greater than 0 ... "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 171 ms, sys: 4.08 ms, total: 175 ms\n",
      "Wall time: 175 ms\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 0.172s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7ff3a836b040>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

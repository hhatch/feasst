{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Canonical ensemble Monte Carlo\n",
    "\n",
    "\n",
    "In this example, a low density simulation is conducted with a constant number of particles.\n",
    "The average energy is compared to published results from the NIST SRSW.\n",
    "https://www.nist.gov/programs-projects/nist-standard-reference-simulation-website\n",
    "\n",
    "The log file is designed to monitor simulations but may not be the best route to computing properties.\n",
    "For example, the energy is output in the log file, but this tutorial shows two alternate ways to compute average energy.\n",
    "First, an [Analyze](../doc/Analyze.rst), [Energy](../../steppers/doc/Energy.rst), to compute average energies.\n",
    "Second, the Monte Carlo simulation attempts were performed one step at a time to allow for [accumulation](../../math/doc/Accumulator.rst) of the ensemble average directly in the Python script."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import unittest\n",
    "import feasst as fst\n",
    "\n",
    "class TestMonteCarlo1LJNVT(unittest.TestCase):\n",
    "    \"\"\"Test a canonical ensemble Lennard Jones Monte Carlo simulation\"\"\"\n",
    "    def test_srsw(self, num_particles=500, density=0.001, steps_per=1e5):\n",
    "        \"\"\"Compare with the reported average energy from the NIST SRSW.\n",
    "        https://mmlapps.nist.gov/srs/LJ_PURE/mc.htm\n",
    "        https://www.nist.gov/programs-projects/nist-standard-reference-simulation-website\n",
    "\n",
    "        num_particles -- number of LJ particles\n",
    "        density -- number density\n",
    "        steps_per -- steps between each Anaylze/Modify\n",
    "        \"\"\"\n",
    "            \n",
    "        monte_carlo = fst.MonteCarlo()\n",
    "        # monte_carlo.set(fst.MakeRandomMT19937(fst.args({\"seed\": \"1234\"})))\n",
    "        monte_carlo.set(fst.lennard_jones(fst.args({\n",
    "            \"cubic_box_length\": str((num_particles/density)**(1./3.)),\n",
    "            \"dual_cut\": \"1\"})))\n",
    "        monte_carlo.set(fst.MakeThermoParams(fst.args({\"beta\": str(1./0.9), \"chemical_potential\": \"1.\"})))\n",
    "        monte_carlo.set(fst.MakeMetropolis())\n",
    "        monte_carlo.add(fst.MakeTrialTranslate(fst.args({\n",
    "            \"weight\": \"1.\",\n",
    "            \"tunable_param\": \"2.\",\n",
    "            \"num_steps\": \"2\",       # attempt a number of configurational bias steps\n",
    "            \"reference_index\": \"0\", # using an (optimized) reference potential\n",
    "        })))\n",
    "        fst.SeekNumParticles(num_particles).with_trial_add().run(monte_carlo)\n",
    "        \n",
    "        monte_carlo.add(fst.MakeLogAndMovie(fst.args({\n",
    "            \"steps_per\" : str(steps_per),\n",
    "            \"file_name\": \"movie\",\n",
    "            \"clear_file\": \"true\"})))\n",
    "        monte_carlo.add(fst.MakeCheckEnergyAndTune(fst.args({\"steps_per\" : str(steps_per)})))\n",
    "\n",
    "        # equilibrate\n",
    "        monte_carlo.attempt(int(1e7))\n",
    "\n",
    "        # compute average energy using a stepper/analysis and output into file\n",
    "        energy = fst.MakeEnergy(fst.args({\n",
    "            \"steps_per_update\": \"1\",\n",
    "            \"steps_per_write\": str(steps_per),\n",
    "            \"file_name\": \"lj_nvt_srsw_energy.txt\",\n",
    "        }))\n",
    "        monte_carlo.add(energy)\n",
    "\n",
    "        # compute average using this script\n",
    "        energy_alt = fst.Accumulator()\n",
    "\n",
    "        # production\n",
    "        for _ in range(int(1e7)):\n",
    "            monte_carlo.attempt()\n",
    "            energy_alt.accumulate(monte_carlo.criteria().current_energy())\n",
    "\n",
    "        # test that the two methods to compute average energy are the same\n",
    "        self.assertAlmostEqual(energy.energy().average(), energy_alt.average(), delta=1e-6)\n",
    "\n",
    "        # test the average against the NIST SRSW\n",
    "        stdev = (energy.energy().block_stdev()**2 + (1.89E-05)**2)**(1./2.)\n",
    "        # print(energy.energy().average(), energy_alt.average())\n",
    "        self.assertAlmostEqual(-9.9165E-03*num_particles, energy.energy().average(),\n",
    "                               delta=2.576*stdev)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the test passes, the energy is within the tolerance of the SRSW value and the two ensemble average methods agreed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_srsw (__main__.TestMonteCarlo1LJNVT)\n",
      "Compare with the reported average energy from the NIST SRSW. ... "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 21min 15s, sys: 976 ms, total: 21min 16s\n",
      "Wall time: 21min 15s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 1275.158s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7f4d805104a8>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Did this tutorial work as expected? Did you find any inconsistencies or have any comments? Please [contact](../../../CONTACT.rst) us. Any feedback is appreciated!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grand canonical ensemble transition-matrix Monte Carlo\n",
    "\n",
    "In this example, flat histogram methods are employed for a small macrostate range from 0 to 5 particles.\n",
    "Flat histogram acceptance criteria and Monte Carlo are defined using `fh.py`.\n",
    "To begin, the system is initialized with the minimum number of particles by setting Metropolis acceptance criteria with favorable conditions for adding particles.\n",
    "The Metropolis criteria are then replaced with the flat histogram criteria.\n",
    "At this point, typical analysis from the previous tutorials are added.\n",
    "In addition, we also add checkpoint files, criteria status, and average energy of a given macrostate.\n",
    "Finally, the simulation is run until the requested number of iterations of the flat histogram algorithm are complete.\n",
    "\n",
    "A small macrostate range allows the simulation to run quickly with good sampling, and thus it is an ideal starting point to test the simulations. To begin, read the previous SRSW values from file for comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ln_prob_srsw</th>\n",
       "      <th>ln_prob_srsw_std</th>\n",
       "      <th>u_srsw</th>\n",
       "      <th>u_srsw_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-18.707570</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-2.312265e-10</td>\n",
       "      <td>6.689238e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-14.037373</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-6.057402e-04</td>\n",
       "      <td>6.709198e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-10.050312</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-3.057422e-02</td>\n",
       "      <td>9.649147e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-6.458921</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-8.992832e-02</td>\n",
       "      <td>1.387472e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-3.145637</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-1.784571e-01</td>\n",
       "      <td>3.315245e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.045677</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-2.961920e-01</td>\n",
       "      <td>1.348791e-05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ln_prob_srsw  ln_prob_srsw_std        u_srsw    u_srsw_std\n",
       "0    -18.707570              0.04 -2.312265e-10  6.689238e-10\n",
       "1    -14.037373              0.04 -6.057402e-04  6.709198e-10\n",
       "2    -10.050312              0.04 -3.057422e-02  9.649147e-06\n",
       "3     -6.458921              0.04 -8.992832e-02  1.387472e-04\n",
       "4     -3.145637              0.04 -1.784571e-01  3.315245e-05\n",
       "5     -0.045677              0.04 -2.961920e-01  1.348791e-05"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import feasst as fst\n",
    "\n",
    "ln_prob_srsw = fst.LnProbability(pd.read_csv(\"../test/data/stat150.csv\")[\"lnPI\"].values[:6])\n",
    "ln_prob_srsw.normalize() # normalize to account for a smaller macrostate range\n",
    "df = pd.DataFrame(data=ln_prob_srsw.values(), columns={\"ln_prob_srsw\"})\n",
    "df['ln_prob_srsw_std'] = 0.04\n",
    "df['u_srsw'] = pd.read_csv(\"../test/data/stat150.csv\")[\"energy\"]\n",
    "df['u_srsw_std'] = pd.read_csv(\"../test/data/stat150.csv\")[\"energystd\"]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "import pyfeasst\n",
    "\n",
    "def run_sample_lj_tm_mc(checkpoint_file_name):\n",
    "    monte_carlo = fst.MonteCarlo()\n",
    "    monte_carlo.set(fst.lennard_jones(fst.args({\"cubic_box_length\": \"8\"})))\n",
    "    monte_carlo.set(fst.MakeThermoParams(fst.args({\"beta\": str(1./1.5), \"chemical_potential\": \"-2.352321\"})))\n",
    "    monte_carlo.set(fst.MakeFlatHistogram(\n",
    "        fst.MakeMacrostateNumParticles(fst.Histogram(fst.args({\"width\": \"1\", \"min\": \"0\", \"max\": \"5\"}))),\n",
    "        fst.MakeTransitionMatrix(fst.args({\"min_sweeps\": \"50\"}))))\n",
    "    monte_carlo.add(fst.MakeTrialTranslate(fst.args({\"weight\": \"0.25\", \"tunable_param\": \"1.\"})))\n",
    "    monte_carlo.add(fst.MakeTrialTransfer(fst.args({\"weight\": \"1\", \"particle_type\": \"0\"})))\n",
    "    monte_carlo.add(fst.MakeLogAndMovie(fst.args({\"steps_per\": str(1e5), \"file_name\": \"lj\"})))\n",
    "    monte_carlo.add(fst.MakeCheckEnergyAndTune(fst.args({\"steps_per\": str(1e5), \"tolerance\": str(1e-8)})))\n",
    "    monte_carlo.add(fst.MakeCriteriaUpdater(fst.args({\"steps_per\": str(1e5)})))\n",
    "    monte_carlo.add(fst.MakeCriteriaWriter(fst.args({\"steps_per\": str(1e5), \"file_name\": \"lj_fh.txt\"})))\n",
    "    monte_carlo.add(fst.MakeEnergy(fst.args({\"file_name\": \"lj_en.txt\", \"steps_per_update\": \"1\",\n",
    "        \"steps_per_write\": str(1e5), \"multistate\": \"true\"})))\n",
    "    monte_carlo.set(fst.MakeCheckpoint(fst.args({\"file_name\": checkpoint_file_name, \"num_hours\": \"0.001\"})))\n",
    "    monte_carlo.run_until_complete()\n",
    "\n",
    "class TestFlatHistogramLJ(unittest.TestCase):\n",
    "    \"\"\"Test flat histogram grand canonical ensemble Monte Carlo simulations\"\"\"\n",
    "    def test_serial_5max(self):\n",
    "        \"\"\"Compare the free energies and potential energies with the NIST SRSW\n",
    "        https://www.nist.gov/programs-projects/nist-standard-reference-simulation-website\n",
    "        https://mmlapps.nist.gov/srs/LJ_PURE/eostmmc.htm\n",
    "        \"\"\"\n",
    "        # To emulate post-processing, obtain monte_carlo from checkpoint file\n",
    "        checkpoint_file_name='checkpoint.txt'\n",
    "        run_sample_lj_tm_mc(checkpoint_file_name)\n",
    "        monte_carlo = fst.MonteCarlo().deserialize(pyfeasst.read_checkpoint(checkpoint_file_name))\n",
    "\n",
    "        # To compare with previous values, make a deep copy of the FlatHistogram derived class\n",
    "        criteria = fst.FlatHistogram(monte_carlo.criteria())\n",
    "        print('lnpi energy')\n",
    "        for macro in range(criteria.num_states()):\n",
    "            self.assertAlmostEqual(\n",
    "                df[\"ln_prob_srsw\"][macro],\n",
    "                criteria.bias().ln_prob().value(macro),\n",
    "                delta=df[\"ln_prob_srsw_std\"][macro])\n",
    "            energy_analyzer = monte_carlo.analyze(monte_carlo.num_analyzers() - 1)\n",
    "            energy_accumulator = energy_analyzer.analyze(macro).accumulator()\n",
    "            stdev = (df[\"u_srsw_std\"][macro]**2 + energy_accumulator.block_stdev()**2)**(1./2.)\n",
    "            #print(criteria.bias().ln_prob().value(macro), energy_accumulator.average())\n",
    "            self.assertAlmostEqual(\n",
    "                df[\"u_srsw\"][macro],\n",
    "                energy_accumulator.average(),\n",
    "                delta=5*stdev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_serial_5max (__main__.TestFlatHistogramLJ)\n",
      "Compare the free energies and potential energies with the NIST SRSW ... "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lnpi energy\n",
      "CPU times: user 8.97 s, sys: 1.53 s, total: 10.5 s\n",
      "Wall time: 10.5 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 10.458s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7f41d3758070>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A number of files should also have been created.\n",
    "If the flat histogram method is sampling perfectly, the simulation performs a random walk along the macrostate.\n",
    "For larger ranges of macrostates, or for more difficult sampling cases, monitoring the macrostate can help you determine what conditions are preventing convergence.\n",
    "For example, a plot of the macrostate as a function of the number of attempts may look like the following:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>volume</th>\n",
       "      <th>p0</th>\n",
       "      <th>beta</th>\n",
       "      <th>state</th>\n",
       "      <th>energy</th>\n",
       "      <th>attempt</th>\n",
       "      <th>TrialTranslate</th>\n",
       "      <th>tunable</th>\n",
       "      <th>TrialAdd</th>\n",
       "      <th>TrialRemove</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>512</td>\n",
       "      <td>4</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.148161</td>\n",
       "      <td>100000</td>\n",
       "      <td>0.943354</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0444889</td>\n",
       "      <td>0.0441788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>512</td>\n",
       "      <td>5</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>5</td>\n",
       "      <td>-0.0307635</td>\n",
       "      <td>200000</td>\n",
       "      <td>0.968788</td>\n",
       "      <td>1.05</td>\n",
       "      <td>0.538184</td>\n",
       "      <td>0.53477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>512</td>\n",
       "      <td>5</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>5</td>\n",
       "      <td>-0.0537466</td>\n",
       "      <td>300000</td>\n",
       "      <td>0.970127</td>\n",
       "      <td>1.1025</td>\n",
       "      <td>0.811549</td>\n",
       "      <td>0.956009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>512</td>\n",
       "      <td>1</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.00060574</td>\n",
       "      <td>400000</td>\n",
       "      <td>0.967404</td>\n",
       "      <td>1.15763</td>\n",
       "      <td>0.812098</td>\n",
       "      <td>0.971658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>512</td>\n",
       "      <td>4</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.00969184</td>\n",
       "      <td>500000</td>\n",
       "      <td>0.968405</td>\n",
       "      <td>1.21551</td>\n",
       "      <td>0.818027</td>\n",
       "      <td>0.97253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>465</th>\n",
       "      <td>512</td>\n",
       "      <td>0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>-4.12506e-15</td>\n",
       "      <td>4700000</td>\n",
       "      <td>0.956725</td>\n",
       "      <td>3.92013</td>\n",
       "      <td>0.818701</td>\n",
       "      <td>0.97249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>512</td>\n",
       "      <td>3</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.00545166</td>\n",
       "      <td>4800000</td>\n",
       "      <td>0.956511</td>\n",
       "      <td>3.92013</td>\n",
       "      <td>0.817026</td>\n",
       "      <td>0.973856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>512</td>\n",
       "      <td>2</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.00966056</td>\n",
       "      <td>4900000</td>\n",
       "      <td>0.959734</td>\n",
       "      <td>3.92013</td>\n",
       "      <td>0.810314</td>\n",
       "      <td>0.97335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>468</th>\n",
       "      <td>512</td>\n",
       "      <td>3</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.0857703</td>\n",
       "      <td>5000000</td>\n",
       "      <td>0.961697</td>\n",
       "      <td>3.92013</td>\n",
       "      <td>0.81506</td>\n",
       "      <td>0.97419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>469</th>\n",
       "      <td>512</td>\n",
       "      <td>0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>-3.21954e-15</td>\n",
       "      <td>5100000</td>\n",
       "      <td>0.95887</td>\n",
       "      <td>3.92013</td>\n",
       "      <td>0.808285</td>\n",
       "      <td>0.973467</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>470 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    volume p0      beta state        energy  attempt TrialTranslate  tunable  \\\n",
       "0      512  4  0.666667     4     -0.148161   100000       0.943354        1   \n",
       "1      512  5  0.666667     5    -0.0307635   200000       0.968788     1.05   \n",
       "2      512  5  0.666667     5    -0.0537466   300000       0.970127   1.1025   \n",
       "3      512  1  0.666667     1   -0.00060574   400000       0.967404  1.15763   \n",
       "4      512  4  0.666667     4   -0.00969184   500000       0.968405  1.21551   \n",
       "..     ... ..       ...   ...           ...      ...            ...      ...   \n",
       "465    512  0  0.666667     0  -4.12506e-15  4700000       0.956725  3.92013   \n",
       "466    512  3  0.666667     3   -0.00545166  4800000       0.956511  3.92013   \n",
       "467    512  2  0.666667     2   -0.00966056  4900000       0.959734  3.92013   \n",
       "468    512  3  0.666667     3    -0.0857703  5000000       0.961697  3.92013   \n",
       "469    512  0  0.666667     0  -3.21954e-15  5100000        0.95887  3.92013   \n",
       "\n",
       "      TrialAdd TrialRemove  \n",
       "0    0.0444889   0.0441788  \n",
       "1     0.538184     0.53477  \n",
       "2     0.811549    0.956009  \n",
       "3     0.812098    0.971658  \n",
       "4     0.818027     0.97253  \n",
       "..         ...         ...  \n",
       "465   0.818701     0.97249  \n",
       "466   0.817026    0.973856  \n",
       "467   0.810314     0.97335  \n",
       "468    0.81506     0.97419  \n",
       "469   0.808285    0.973467  \n",
       "\n",
       "[470 rows x 10 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(\"lj.txt\", header=0).dropna(axis='columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that states are index integer values starting from 0 (e.g., 0, 1, 2, ..., criteria.num_states() - 1)\n",
    "The state and macrostate happen to be the same when the minimum macrostate is 0, and the macrostate is the integer number of particles.\n",
    "But if the minimum macrostate was 1, then state 0 would correspond to macrostate 1.0.\n",
    "Obtain an arbitrary macrostate value from the state as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "state macrostate\n",
      "0 0.0\n",
      "1 1.0\n",
      "2 2.0\n",
      "3 3.0\n",
      "4 4.0\n",
      "5 5.0\n"
     ]
    }
   ],
   "source": [
    "monte_carlo = fst.MonteCarlo().deserialize(pyfeasst.read_checkpoint(\"checkpoint.txt\"))\n",
    "criteria = fst.FlatHistogram(monte_carlo.criteria())\n",
    "print('state macrostate')\n",
    "for state in range(criteria.num_states()):\n",
    "    print(state, criteria.macrostate().value(state))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Many simulation parameters may be obtained from the checkpoint file to automate your analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "volume 512.0\n",
      "beta 0.6666666666666666\n",
      "beta_mu -1.5682139999999998\n",
      "macro_min 0.0\n",
      "macro_max 5.0\n",
      "macro_max 5.0\n"
     ]
    }
   ],
   "source": [
    "print('volume', monte_carlo.configuration().domain().volume())\n",
    "print('beta', monte_carlo.thermo_params().beta())\n",
    "print('beta_mu', monte_carlo.thermo_params().beta_mu())\n",
    "print('macro_min', criteria.macrostate().value(0))  # monte_carlo.critera() doesn't know macrostate. Use copy of derived class\n",
    "print('macro_max', criteria.macrostate().value(criteria.num_states() - 1))\n",
    "print('macro_max', criteria.macrostate().histogram().center_of_last_bin())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The energy of each macrostate may also be compared with the published values in the NIST SRSW."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>u</th>\n",
       "      <th>u_std</th>\n",
       "      <th>u_srsw</th>\n",
       "      <th>u_srsw_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.040058e-16</td>\n",
       "      <td>1.611033e-16</td>\n",
       "      <td>-2.312265e-10</td>\n",
       "      <td>6.689238e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-6.057400e-04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-6.057402e-04</td>\n",
       "      <td>6.709198e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-3.085999e-02</td>\n",
       "      <td>3.288205e-04</td>\n",
       "      <td>-3.057422e-02</td>\n",
       "      <td>9.649147e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-8.994438e-02</td>\n",
       "      <td>6.247232e-04</td>\n",
       "      <td>-8.992832e-02</td>\n",
       "      <td>1.387472e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.783068e-01</td>\n",
       "      <td>5.512742e-04</td>\n",
       "      <td>-1.784571e-01</td>\n",
       "      <td>3.315245e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-2.973719e-01</td>\n",
       "      <td>2.316644e-03</td>\n",
       "      <td>-2.961920e-01</td>\n",
       "      <td>1.348791e-05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              u         u_std        u_srsw    u_srsw_std\n",
       "0  1.040058e-16  1.611033e-16 -2.312265e-10  6.689238e-10\n",
       "1 -6.057400e-04  0.000000e+00 -6.057402e-04  6.709198e-10\n",
       "2 -3.085999e-02  3.288205e-04 -3.057422e-02  9.649147e-06\n",
       "3 -8.994438e-02  6.247232e-04 -8.992832e-02  1.387472e-04\n",
       "4 -1.783068e-01  5.512742e-04 -1.784571e-01  3.315245e-05\n",
       "5 -2.973719e-01  2.316644e-03 -2.961920e-01  1.348791e-05"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "en = pd.read_csv(\"lj_en.txt\").rename(columns={\"average\": \"u\", \"block_stdev\": \"u_std\"})\n",
    "pd.concat([pd.DataFrame(en[[\"u\", \"u_std\"]]), df[[\"u_srsw\", \"u_srsw_std\"]]], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You may also compare the natural logarithm of the macrostate probability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ln_prob_srsw</th>\n",
       "      <th>ln_prob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-18.707570</td>\n",
       "      <td>-18.702804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-14.037373</td>\n",
       "      <td>-14.035393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-10.050312</td>\n",
       "      <td>-10.047641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-6.458921</td>\n",
       "      <td>-6.457822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-3.145637</td>\n",
       "      <td>-3.145087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.045677</td>\n",
       "      <td>-0.045704</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ln_prob_srsw    ln_prob\n",
       "0    -18.707570 -18.702804\n",
       "1    -14.037373 -14.035393\n",
       "2    -10.050312 -10.047641\n",
       "3     -6.458921  -6.457822\n",
       "4     -3.145637  -3.145087\n",
       "5     -0.045677  -0.045704"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.concat([df[\"ln_prob_srsw\"], pd.read_csv(\"lj_fh.txt\", header=1)['ln_prob']], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The macrostate probability distribution depends upon the choice of the chemical potential, but can be reweighted to different chemical potentials.\n",
    "The collection matrix may be accessed directly as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((0.0, 490611.0, 326738.0), (3268.237449174398, 520559.0335592011, 346173.7289886871), (6150.134671388728, 498387.2676497138, 329032.59768084437), (8994.715736100925, 492255.9315743939, 324274.3526889978), (11893.55579635053, 495457.33304284315, 324504.11115981545), (16200.462783328334, 548042.2720933373, 357457.2651219352))\n"
     ]
    }
   ],
   "source": [
    "tm = fst.TransitionMatrix(criteria.bias())\n",
    "print(tm.collection().matrix())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Did this tutorial work as expected? Did you find any inconsistencies or have any comments? Please [contact](../../../CONTACT.rst) us. Any feedback is appreciated!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

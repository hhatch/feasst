{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grand canonical ensemble transition-matrix Monte Carlo with SPC/E\n",
    "\n",
    "This example is similar to the Lennard Jones tutorial, except this time we simulate the SPC/E water model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-05T18:25:36.363403Z",
     "iopub.status.busy": "2021-02-05T18:25:36.362625Z",
     "iopub.status.idle": "2021-02-05T18:25:36.387354Z",
     "shell.execute_reply": "2021-02-05T18:25:36.386708Z"
    }
   },
   "outputs": [],
   "source": [
    "import unittest\n",
    "import feasst as fst\n",
    "\n",
    "class TestFlatHistogramSPCE(unittest.TestCase):\n",
    "    \"\"\"Test flat histogram grand canonical ensemble Monte Carlo simulations\"\"\"\n",
    "    def test_serial_5max(self):\n",
    "        \"\"\"Compare the free energies and potential energies with the NIST SRSW\n",
    "        https://www.nist.gov/programs-projects/nist-standard-reference-simulation-website\n",
    "        https://mmlapps.nist.gov/srs/LJ_PURE/eostmmc.htm\n",
    "        \"\"\"\n",
    "        monte_carlo = fst.MonteCarlo()\n",
    "        monte_carlo.add(fst.MakeConfiguration(fst.args({\"cubic_box_length\": \"20\",\n",
    "            \"physical_constants\": \"CODATA2010\",\n",
    "            \"particle_type0\": fst.install_dir() + \"/forcefield/spce.fstprt\"})))\n",
    "        monte_carlo.add(fst.MakePotential(fst.MakeEwald(fst.args({\"alpha\": str(5.6/20),\n",
    "            \"kmax_squared\": \"38\"}))))\n",
    "        monte_carlo.add(fst.MakePotential(fst.MakeModelTwoBodyFactory(fst.MakeLennardJones(), fst.MakeChargeScreened()),\n",
    "                                          fst.args({\"table_size\": \"1e6\"})))\n",
    "        monte_carlo.add(fst.MakePotential(fst.MakeChargeScreenedIntra(), fst.MakeVisitModelBond()))\n",
    "        monte_carlo.add(fst.MakePotential(fst.MakeChargeSelf()))\n",
    "        monte_carlo.add(fst.MakePotential(fst.MakeLongRangeCorrections()))\n",
    "        temperature = fst.kelvin2kJpermol(525, monte_carlo.configuration())\n",
    "        monte_carlo.set(fst.MakeThermoParams(fst.args({\"beta\": str(1/temperature),\n",
    "                                                       \"chemical_potential\": str(-8.14*temperature)})))\n",
    "        criteria = fst.MakeFlatHistogram(\n",
    "            fst.MakeMacrostateNumParticles(fst.Histogram(fst.args({\"width\": \"1\", \"max\": \"5\", \"min\": \"0\"}))),\n",
    "            fst.MakeTransitionMatrix(fst.args({\"min_sweeps\": \"20\"})))\n",
    "        monte_carlo.set(criteria)\n",
    "        steps_per = str(1e4)\n",
    "        monte_carlo.add(fst.MakeTrialTranslate())\n",
    "        monte_carlo.add(fst.MakeTrialTransfer(fst.args({\"particle_type\": \"0\"})))\n",
    "        monte_carlo.add(fst.MakeCriteriaUpdater(fst.args({\"steps_per\": steps_per})))\n",
    "        monte_carlo.add(fst.MakeCriteriaWriter(fst.args({\"steps_per\": steps_per,\n",
    "                                            \"file_name\": \"spce_fh.txt\"})))\n",
    "        monte_carlo.add(fst.MakeEnergy(fst.args({\"steps_per_write\": steps_per,\n",
    "                                        \"file_name\": \"spce_en.txt\",\n",
    "                                        \"multistate\": \"True\"})))\n",
    "        monte_carlo.run_until_complete()\n",
    "        \n",
    "        lnpi_previous = [\n",
    "            [-2.7207, 0.015],\n",
    "            [-1.8523, 0.015],\n",
    "            [-1.54708, 0.016],\n",
    "            [-1.51786, 0.015],\n",
    "            [-1.6479, 0.015],\n",
    "            [-1.8786, 0.03]]\n",
    "        energy_previous = [\n",
    "            [0, 1e-11],\n",
    "            [-0.0879115, 1.1293158298007674394e-05],\n",
    "            [-2.326, 0.12],\n",
    "            [-6.806, 0.24],\n",
    "            [-13.499, 0.5],\n",
    "            [-22.27, 1.0]]\n",
    "        for macro in range(criteria.num_states()):\n",
    "            self.assertAlmostEqual(\n",
    "                lnpi_previous[macro][0],\n",
    "                criteria.bias().ln_prob().value(macro),\n",
    "                delta=15.*lnpi_previous[macro][1]\n",
    "            )\n",
    "            energy_analyzer = monte_carlo.analyze(monte_carlo.num_analyzers() - 1)\n",
    "            energy_accumulator = energy_analyzer.analyze(macro).accumulator()\n",
    "            stdev = (energy_previous[macro][1]**2 + energy_accumulator.block_stdev()**2)**(1./2.)\n",
    "            self.assertAlmostEqual(\n",
    "                energy_previous[macro][0],\n",
    "                energy_accumulator.average(),\n",
    "                #criteria.bias().ln_prob().value(macro),\n",
    "                delta=15*stdev\n",
    "            ) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-05T18:25:36.390977Z",
     "iopub.status.busy": "2021-02-05T18:25:36.390376Z",
     "iopub.status.idle": "2021-02-05T18:25:44.948239Z",
     "shell.execute_reply": "2021-02-05T18:25:44.948757Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_serial_5max (__main__.TestFlatHistogramSPCE)\n",
      "Compare the free energies and potential energies with the NIST SRSW ... "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 4 µs, sys: 1 µs, total: 5 µs\n",
      "Wall time: 7.63 µs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 5.525s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7f09e0449e20>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time  # Note: any line starting with % is only to be used with ipynb\n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Did this tutorial work as expected? Did you find any inconsistencies or have any comments? Please [contact](../../../CONTACT.rst) us. Any feedback is appreciated!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

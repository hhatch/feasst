{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grand canonical ensemble transition-matrix Monte Carlo with SPC/E\n",
    "\n",
    "This example is similar to the Lennard Jones tutorial, except this time we simulate the SPC/E water model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import unittest\n",
    "import feasst\n",
    "sys.path.insert(0, feasst.install_dir() + '/plugin/flat_histogram/tutorial/')\n",
    "import fh\n",
    "sys.path.insert(0, feasst.install_dir() + '/plugin/ewald/tutorial/')\n",
    "import spce\n",
    "\n",
    "class TestFlatHistogramLJ(unittest.TestCase):\n",
    "    \"\"\"Test flat histogram grand canonical ensemble Monte Carlo simulations\"\"\"\n",
    "    def test_serial_5max(self):\n",
    "        \"\"\"Compare the free energies and potential energies with the NIST SRSW\n",
    "        https://www.nist.gov/programs-projects/nist-standard-reference-simulation-website\n",
    "        https://mmlapps.nist.gov/srs/LJ_PURE/eostmmc.htm\n",
    "        \"\"\"\n",
    "        config = feasst.Configuration(\n",
    "            feasst.MakeDomain(feasst.args({\"cubic_box_length\": \"20\"})),\n",
    "            feasst.args({\"particle_type\": feasst.install_dir() +  \"/forcefield/data.spce\",\n",
    "                         \"physical_constants\": \"CODATA2010\"}))\n",
    "        R = config.model_params().physical_constants().ideal_gas_constant()\n",
    "        criteria = fh.criteria_flathist(temperature=525*R/1000.,\n",
    "                                        chemical_potential=-35.294567543492,\n",
    "                                        macro_min=0, macro_max=5, tmmc=True)\n",
    "        monte_carlo = fh.monte_carlo(criteria=criteria,\n",
    "                                     system=spce.system(config))\n",
    "        \n",
    "        lnpi_previous = [\n",
    "            [-2.8646724680467574586, 0.013169999365463097227],\n",
    "            [-1.9398627751910603179, 0.01178939015260997529],\n",
    "            [-1.5807236756003240075, 0.016351895458997890015],\n",
    "            [-1.5052807379855992487, 0.0066184482356891451496],\n",
    "            [-1.5966420919511339349, 0.0104786041905751727],\n",
    "            [-1.7783427365938460074, 0.029151132638980264272]\n",
    "        ]\n",
    "        energy_previous = [\n",
    "            [0, 1e-14], \n",
    "            [-0.0879115, 1.1293158298007674394e-06],\n",
    "            [-2.25995, 0.0038263972837305035464],\n",
    "            [-6.52141, 0.051998794872444117909],\n",
    "            [-12.9855, 0.25049856933159531103],\n",
    "            [-21.5192, 0.44650204517740099686],\n",
    "        ]\n",
    "        for macro in range(criteria.num_states()):\n",
    "            self.assertAlmostEqual(\n",
    "                lnpi_previous[macro][0],\n",
    "                criteria.bias().ln_prob().value(macro),\n",
    "                delta=5.*lnpi_previous[macro][1]\n",
    "            )\n",
    "            energy_analyzer = monte_carlo.analyze(monte_carlo.num_analyzers() - 1)\n",
    "            energy_accumulator = energy_analyzer.analyze(macro).accumulator()\n",
    "            stdev = (energy_previous[macro][1]**2 + energy_accumulator.block_stdev()**2)**(1./2.)\n",
    "            self.assertAlmostEqual(\n",
    "                energy_previous[macro][0],\n",
    "                energy_accumulator.average(),\n",
    "                #criteria.bias().ln_prob().value(macro),\n",
    "                delta=10*stdev\n",
    "            ) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_serial_5max (__main__.TestFlatHistogramLJ)\n",
      "Compare the free energies and potential energies with the NIST SRSW ... "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 46s, sys: 1.15 s, total: 1min 47s\n",
      "Wall time: 1min 47s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 107.490s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7f4ea82ccd60>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Did this tutorial work as expected? Did you find any inconsistencies or have any comments? Please [contact](../../../CONTACT.rst) us. Any feedback is appreciated!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

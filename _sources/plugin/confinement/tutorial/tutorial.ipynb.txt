{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Slab, cylindrical, spherical and mixed confinement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import unittest\n",
    "import feasst\n",
    "sys.path.insert(0, feasst.install_dir() + '/plugin/system/tutorial/')\n",
    "import lj_system\n",
    "sys.path.insert(0, feasst.install_dir() + '/plugin/monte_carlo/tutorial/')\n",
    "import analyze\n",
    "\n",
    "class TestConfinement1LJ(unittest.TestCase):\n",
    "    def test(self):\n",
    "        for confinement in [\"slab\", \"cylinder\", \"sphere\", \"union\"]:\n",
    "            monte_carlo = feasst.MonteCarlo()\n",
    "            monte_carlo.set(lj_system.system(lj_system.configuration(box_length=8)))\n",
    "\n",
    "            if confinement == \"slab\":\n",
    "                monte_carlo.add(feasst.Potential(feasst.MakeModelHardShape(feasst.MakeSlab(feasst.args(\n",
    "                    {\"dimension\": \"2\", \"bound0\": \"-1\", \"bound1\": \"1\"})))))\n",
    "            elif confinement == \"cylinder\":\n",
    "                monte_carlo.add(feasst.Potential(feasst.MakeModelHardShape(feasst.MakeCylinder(\n",
    "                    feasst.args({\"radius\": \"4\"}),\n",
    "                    feasst.Position(feasst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})),\n",
    "                    feasst.Position(feasst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"1\"}))\n",
    "                ))))\n",
    "            elif confinement == \"sphere\":\n",
    "                monte_carlo.add(feasst.Potential(feasst.MakeModelHardShape(feasst.MakeSphere(\n",
    "                    feasst.args({\"radius\": \"4\"}),\n",
    "                    feasst.Position(feasst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"}))\n",
    "                ))))\n",
    "            elif confinement == \"union\":\n",
    "                monte_carlo.add(feasst.Potential(feasst.MakeModelHardShape(feasst.MakeShapeUnion(\n",
    "                    feasst.MakeSphere(\n",
    "                        feasst.args({\"radius\": \"2.5\"}),\n",
    "                        feasst.Position(feasst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"}))\n",
    "                    ),\n",
    "                    # feasst.MakeSlab(feasst.args({\"dimension\": \"2\", \"bound0\": \"-1\", \"bound1\": \"1\"}))\n",
    "                    feasst.MakeCylinder(\n",
    "                        feasst.args({\"radius\": \"1.5\"}),\n",
    "                        feasst.Position(feasst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})),\n",
    "                        feasst.Position(feasst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"1\"}))\n",
    "                    )\n",
    "                ))))\n",
    "            else:\n",
    "                assert False # unrecognized confinement\n",
    "\n",
    "            monte_carlo.add(feasst.MakeMetropolis(feasst.args(\n",
    "                {\"beta\": \"1.5\", \"chemical_potential\": \"1.\"})))\n",
    "            monte_carlo.add(feasst.MakeTrialTranslate(feasst.args(\n",
    "                {\"weight\": \"1.\", \"tunable_param\": \"2.\"})))\n",
    "            feasst.SeekNumParticles(50).with_trial_add().run(monte_carlo)\n",
    "            analyze.add(monte_carlo, steps_per=int(1e4))\n",
    "            monte_carlo.attempt(int(1e5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test (__main__.TestConfinement1LJ) ... "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.21 s, sys: 11.6 ms, total: 3.22 s\n",
      "Wall time: 3.21 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 3.213s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7f4381a97490>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

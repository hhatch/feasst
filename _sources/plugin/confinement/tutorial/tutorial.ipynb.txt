{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Slab, cylindrical, spherical and mixed confinement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "import feasst as fst\n",
    "\n",
    "def shape(confinement):\n",
    "    if confinement == \"slab\":\n",
    "        shape = fst.MakeSlab(fst.args({\"dimension\": \"2\", \"bound0\": \"-1\", \"bound1\": \"1\"}))\n",
    "    elif confinement == \"cylinder\":\n",
    "        shape = fst.MakeCylinder(\n",
    "            fst.args({\"radius\": \"4\"}),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"1\"})))\n",
    "    elif confinement == \"sphere\":\n",
    "        shape = fst.MakeSphere(\n",
    "            fst.args({\"radius\": \"4\"}),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})))\n",
    "    elif confinement == \"union\":\n",
    "        shape = fst.MakeShapeUnion(\n",
    "            fst.MakeSphere(\n",
    "                fst.args({\"radius\": \"2.5\"}),\n",
    "                fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"}))),\n",
    "            fst.MakeSlab(fst.args({\"dimension\": \"2\", \"bound0\": \"-1\", \"bound1\": \"1\"})))\n",
    "    elif confinement == \"network\":\n",
    "        shape = fst.MakeSphere(\n",
    "            fst.args({\"radius\": \"5\"}),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})))\n",
    "        shape = fst.MakeShapeUnion(shape, fst.MakeCylinder(\n",
    "            fst.args({\"radius\": \"2\"}),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})),\n",
    "            fst.Position(fst.args({\"x\": \"1\", \"y\": \"0\", \"z\": \"0\"}))))\n",
    "        shape = fst.MakeShapeUnion(shape, fst.MakeCylinder(\n",
    "            fst.args({\"radius\": \"2\"}),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"1\", \"z\": \"0\"}))))\n",
    "        shape = fst.MakeShapeUnion(shape, fst.MakeCylinder(\n",
    "            fst.args({\"radius\": \"2\"}),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"0\"})),\n",
    "            fst.Position(fst.args({\"x\": \"0\", \"y\": \"0\", \"z\": \"1\"}))))\n",
    "    else:\n",
    "        assert False # unrecognized\n",
    "    return shape\n",
    "        \n",
    "def run(confinement, cubic_box_length, num_particles):\n",
    "    monte_carlo = fst.MonteCarlo()\n",
    "    monte_carlo.add(fst.MakeConfiguration(fst.args({\"cubic_box_length\": str(cubic_box_length),\n",
    "                                           \"particle_type0\": fst.install_dir() + \"/forcefield/lj.fstprt\"})))\n",
    "    monte_carlo.add(fst.MakePotential(fst.MakeLennardJones()))\n",
    "    monte_carlo.add(fst.MakePotential(fst.MakeLongRangeCorrections()))\n",
    "    monte_carlo.add(fst.MakePotential(fst.MakeModelHardShape(shape(confinement))))\n",
    "    monte_carlo.set(fst.MakeThermoParams(fst.args(\n",
    "        {\"beta\": \"1.5\", \"chemical_potential\": \"1.\"})))\n",
    "    monte_carlo.set(fst.MakeMetropolis())\n",
    "    monte_carlo.add(fst.MakeTrialTranslate(fst.args(\n",
    "        {\"weight\": \"1.\", \"tunable_param\": \"2.\"})))\n",
    "    monte_carlo.add(fst.MakeTrialAdd(fst.args({\"particle_type\": \"0\"})))\n",
    "    monte_carlo.run(fst.MakeRun(fst.args({\"until_num_particles\": str(num_particles)})))\n",
    "    monte_carlo.run(fst.MakeRemoveTrial(fst.args({\"name\": \"TrialAdd\"})))\n",
    "    monte_carlo.add(fst.MakeLogAndMovie(fst.args({\"steps_per\": str(int(1e4)), \"file_name\": confinement})))\n",
    "    monte_carlo.add(fst.MakeCheckEnergyAndTune(fst.args({\"steps_per\": str(int(1e4))})))\n",
    "    monte_carlo.attempt(int(1e5))\n",
    "            \n",
    "class TestConfinement1LJ(unittest.TestCase):\n",
    "    def test(self):\n",
    "        for confinement in [\"slab\", \"cylinder\", \"sphere\", \"union\", \"network\"]:\n",
    "            cubic_box_length = 8\n",
    "            num_particles = 50\n",
    "            if confinement == 'network':\n",
    "                cubic_box_length=20\n",
    "                num_particles=500\n",
    "            run(confinement=confinement,\n",
    "                cubic_box_length=cubic_box_length,\n",
    "                num_particles=num_particles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test (__main__.TestConfinement1LJ) ... "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2 µs, sys: 0 ns, total: 2 µs\n",
      "Wall time: 4.05 µs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 1 test in 11.686s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.main.TestProgram at 0x7f7527b9c4c0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time\n",
    "unittest.main(argv=[''], verbosity=2, exit=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Did this tutorial work as expected? Did you find any inconsistencies or have any comments? Please [contact](../../../CONTACT.rst) us. Any feedback is appreciated!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
